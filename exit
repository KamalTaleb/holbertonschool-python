[1mdiff --git a/0x016-count_it/0-count.py b/0x016-count_it/0-count.py[m
[1mdeleted file mode 100755[m
[1mindex 1a08fdb..0000000[m
[1m--- a/0x016-count_it/0-count.py[m
[1m+++ /dev/null[m
[36m@@ -1,43 +0,0 @@[m
[31m-#!/usr/bin/python3[m
[31m-""" 0-count.py """[m
[31m-from operator import itemgetter[m
[31m-import requests[m
[31m-[m
[31m-[m
[31m-def count_words(subreddit, word_list, hot_list=[], init=0, after="null"):[m
[31m-    url = "https://www.reddit.com/r/{}/hot.json".format(subreddit)[m
[31m-    agt = {"User-Agent": "linux:1:v2.1 (by /u/heimer_r)"}[m
[31m-    payload = {"limit": "100", "after": after}[m
[31m-    hot = requests.get(url, headers=agt, params=payload, allow_redirects=False)[m
[31m-    if hot.status_code == 200:[m
[31m-        posts = hot.json().get("data").get("children")[m
[31m-        hot_list += [post.get("data").get("title") for post in posts][m
[31m-        after = hot.json().get("data").get("after")[m
[31m-        if after is not None:[m
[31m-            count_words(subreddit, word_list, hot_list, 1, after)[m
[31m-        if init == 0:[m
[31m-            hot_str = " ".join(hot_list)[m
[31m-            hot_words = hot_str.split(" ")[m
[31m-            word_list_low = sorted(word_list)[m
[31m-            rt = [][m
[31m-            for word in word_list_low:[m
[31m-                num = len([m
[31m-                    list([m
[31m-                        filter([m
[31m-                            lambda hot_w: hot_w.lower() == word.lower(),[m
[31m-                            hot_words)))[m
[31m-                if num != 0:[m
[31m-                    rt.append([word, num])[m
[31m-            if len(rt) != 0:[m
[31m-                i = 0[m
[31m-                while i < len(rt) - 1:[m
[31m-                    if rt[i + 1][0] is not None and rt[i][0] == rt[i + 1][0]:[m
[31m-                        rt[i][1] += rt[i + 1][1][m
[31m-                        rt.pop(i + 1)[m
[31m-                        rt.append([None, None])[m
[31m-                        i -= 1[m
[31m-                    i += 1[m
[31m-                r = list(filter(lambda x: x != [None, None], rt))[m
[31m-                r_sorted = sorted(r, key=lambda x: (x[1]), reverse=True)[m
[31m-                for i in r_sorted:[m
[31m-                    print(*i, sep=": ")[m
[1mdiff --git a/0x016-count_it/README.md b/0x016-count_it/README.md[m
[1mdeleted file mode 100644[m
[1mindex 695f6f8..0000000[m
[1m--- a/0x016-count_it/README.md[m
[1m+++ /dev/null[m
[36m@@ -1 +0,0 @@[m
[31m-readme file[m
\ No newline at end of file[m
[1mdiff --git a/0x13-SQL_more_queries/13-force_name.sql b/0x13-SQL_more_queries/13-force_name.sql[m
[1mdeleted file mode 100644[m
[1mindex 9bfa723..0000000[m
[1m--- a/0x13-SQL_more_queries/13-force_name.sql[m
[1m+++ /dev/null[m
[36m@@ -1,5 +0,0 @@[m
[31m--- Always a name[m
[31m-CREATE TABLE IF NOT EXISTS force_name ([m
[31m-     id INT,[m
[31m-     name VARCHAR(256) NOT NULL[m
[31m-);[m
[1mdiff --git a/0x19-redis_basic/exercise.py b/0x19-redis_basic/exercise.py[m
[1mold mode 100644[m
[1mnew mode 100755[m
[1mdiff --git a/0x1A-cashing/0-basic_cashe.py b/0x1A-cashing/0-basic_cashe.py[m
[1mdeleted file mode 100644[m
[1mindex 50cc83d..0000000[m
[1m--- a/0x1A-cashing/0-basic_cashe.py[m
[1m+++ /dev/null[m
[36m@@ -1,17 +0,0 @@[m
[31m-#!/usr/bin/python3[m
[31m-"""basic cache"""[m
[31m-from base_caching import BaseCaching[m
[31m-[m
[31m-[m
[31m-class BasicCache(BaseCaching):[m
[31m-    """BaseCaching"""[m
[31m-    def put(self, key, item):[m
[31m-        """Add an item"""[m
[31m-        if key and item:[m
[31m-            self.cache_data[key] = item[m
[31m-[m
[31m-    def get(self, key):[m
[31m-        """Get an item"""[m
[31m-        if key is None or self.cache_data.get(key) is None:[m
[31m-            return None[m
[31m-        return self.cache_data.get(key)[m
[1mdiff --git a/0x1A-cashing/1-fifo_cache.py b/0x1A-cashing/1-fifo_cache.py[m
[1mdeleted file mode 100755[m
[1mindex 2c0078b..0000000[m
[1m--- a/0x1A-cashing/1-fifo_cache.py[m
[1m+++ /dev/null[m
[36m@@ -1,42 +0,0 @@[m
[31m-#!/usr/bin/python3[m
[31m-"""fifo cache"""[m
[31m-from base_caching import BaseCaching[m
[31m-[m
[31m-[m
[31m-class FIFOCache(BaseCaching):[m
[31m-    """BaseCaching"""[m
[31m-    def __init__(self):[m
[31m-        super().__init__()[m
[31m-        self.data = {}[m
[31m-        self.next_in, self.next_out = 0, 0[m
[31m-[m
[31m-    def _pop(self):[m
[31m-        """pops out of the list"""[m
[31m-        self.next_out += 1[m
[31m-        key = self.data[self.next_out][m
[31m-        del self.data[self.next_out], self.cache_data[key][m
[31m-[m
[31m-    def _push(self, key, item):[m
[31m-        """appends to a list"""[m
[31m-        if len(self.cache_data) > BaseCaching.MAX_ITEMS - 1:[m
[31m-            print("DISCARD: {}".format(self.data[self.next_out + 1]))[m
[31m-            self._pop()[m
[31m-        self.cache_data[key] = item[m
[31m-        self.next_in += 1[m
[31m-        self.data[self.next_in] = key[m
[31m-[m
[31m-    def put(self, key, item):[m
[31m-        """ Add an item"""[m
[31m-        if key and item:[m
[31m-            if key in self.cache_data:[m
[31m-                self.cache_data[key] = item[m
[31m-            else:[m
[31m-                self._push(key, item)[m
[31m-[m
[31m-    def get(self, key):[m
[31m-        """ Get an item"""[m
[31m-        if key is None or self.cache_data.get(key) is None:[m
[31m-            return None[m
[31m-        if key in self.cache_data:[m
[31m-            val = self.cache_data[key][m
[31m-            return val[m
[1mdiff --git a/0x1A-cashing/README.md b/0x1A-cashing/README.md[m
[1mdeleted file mode 100644[m
[1mindex 695f6f8..0000000[m
[1m--- a/0x1A-cashing/README.md[m
[1m+++ /dev/null[m
[36m@@ -1 +0,0 @@[m
[31m-readme file[m
\ No newline at end of file[m
